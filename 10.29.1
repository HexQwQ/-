bool isFull(Queue* que)
//  判断队列que是否为满
//  若满返回 true 并在一行打印 The queue is Full 末尾换行！！！
//  否则返回 false

{
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/
	if( que->front == (que->rear+1)%que->maxSize )
	{
		printf("The queue is Full\n");
		return true;
	}
	return false;
    /********** End **********/
}

bool isEmpty(Queue* que)
//  判断队列que是否为空
//  若空返回 true 并在一行打印 The queue is Empty 末尾换行！！！
//  否则返回 false
{
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/
	if( que->front == que->rear )
	{
		printf("The queue is Empty\n");
		return true;
	}
	return false;

    /********** End **********/
}

int enQueue(Queue* que, int item)
//  实现入队操作：将元素item加入队列que尾部
//  若队列没满，编写加入操作，返回 1
//  若队列满了，不做任何操作，返回 -1
{
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/
	if( isFull(que) )  return -1;
	flag = true;
	que->data[que->rear] = item;
	que->rear = (que->rear+1)%que->maxSize;
	return 1;
    /********** End **********/
}

int deQueue(Queue* que)
//  实现出队操作：移除队列que首部元素，并返回元素值
{
    // 请在这里补充代码，完成本关任务
    /********** Begin *********/
	if( isEmpty(que) == true )  return -1;
    flag = false;
	int t = que->data[que->front];
	que->front = (que->front+1)%que->maxSize;
	return t;
    /********** End **********/
}
